# formatter.py

import re
from typing import List, Dict

def structure_output(generated_text: str, context_chunks: List[Dict]) -> Dict:
    """
    Parses generalized text output from an LLM and formats it into a
    structured JSON object. It looks for lines ending in a colon as section headers.

    Args:
        generated_text: The text generated by the LLM.
        context_chunks: The list of chunks used as context.

    Returns:
        A dictionary containing the structured findings.
    """
    print("\nStructuring generated text into a generalized JSON format...")
    findings = []
    
    # Use regex to split the text by lines that act as headers (i.e., end with a colon).
    # This pattern captures the heading and the content that follows it.
    pattern = r'^(.*?):\s*(.*?)(?=\n[^\n]*:|$)'
    matches = re.findall(pattern, generated_text, re.DOTALL | re.MULTILINE)

    if not matches:
        print("Warning: Could not parse any structured sections. Returning raw text.")
        return {"raw_output": generated_text.strip()}

    for match in matches:
        heading = match[0].strip()
        content = match[1].strip()
        
        if heading and content: # Ensure both heading and content exist
            findings.append({
                "section_title": heading,
                "content": content,
                "sources": sorted(list(set([chunk['source_document'] for chunk in context_chunks])))
            })

    print(f"Structuring complete. Found {len(findings)} sections.")
    return {"key_findings": findings}